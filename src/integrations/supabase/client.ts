// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { logger } from '@/utils/logger';

// Use environment variables, with fallback for development
// IMPORTANT: In production, always use environment variables!
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://siqmwgeriobtlnkxfeas.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNpcW13Z2VyaW9idGxua3hmZWFzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU0NTA3MTMsImV4cCI6MjA3MTAyNjcxM30.Wt-9b6ohRw4hpTwT_ewov5sVWmYTFPOFtvxEOZWD8wM";

// Warn in development if using defaults
if (import.meta.env.DEV && (!import.meta.env.VITE_SUPABASE_URL || !import.meta.env.VITE_SUPABASE_ANON_KEY)) {
  logger.warn('‚ö†Ô∏è Using default Supabase credentials. Set VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY in .env file.');
}

// Debug for iOS Simulator issues

if (typeof window !== 'undefined') {
  
  if (window.navigator?.userAgent?.includes('Artrio iOS App')) {
    console.log('üîß iOS App detected - Supabase URL:', SUPABASE_URL);
    console.log('üîß User Agent:', window.navigator.userAgent);
  }
} else {
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";


let supabase: any;

try {
  supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      storageKey: 'artrio-auth-token',
      flowType: 'pkce'
    },
    realtime: {
      params: {
        eventsPerSecond: 10
      }
    }
  });
  
  
  // Test basic connectivity for iOS Simulator
  if (typeof window !== 'undefined' && window.navigator?.userAgent?.includes('Artrio iOS App')) {
    
    // Test fetch to Google (basic network test)
    fetch('https://www.google.com', { mode: 'no-cors' })
    
    // Test Supabase URL accessibility
    fetch(SUPABASE_URL, { mode: 'no-cors' })
  }
  
} catch (error) {
  throw error;
}

export { supabase };

// Helper function to ensure user is authenticated before making RPC calls
export const authenticatedRpc = async (functionName: string, args: any = {}) => {
  const { data: { session }, error: sessionError } = await supabase.auth.getSession();
  
  if (sessionError || !session?.user) {
    throw new Error('Authentication required. Please log in again.');
  }
  
  return supabase.rpc(functionName, args);
};